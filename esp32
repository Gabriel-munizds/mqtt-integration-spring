#include <WiFi.h>
#include <PubSubClient.h>
#include <math.h>

// Credenciais de rede Wi-Fi
const char* ssid = "Desenv";
const char* password = "D2ti2018#";

// Credenciais do broker MQTT
const char* mqtt_server = "192.168.100.86"; // Endereço do broker MQTT
const int mqtt_port = 1883; // Porta padrão do MQTT
const char* mqtt_user = "admin"; // Nome de usuário MQTT
const char* mqtt_password = "12345678"; // Senha do usuário MQTT

WiFiClient espClient;
PubSubClient client(espClient);

float modulanteValue = 0.0; // Valor inicial da onda senoidal
float portadoraValue = 0.0; // Valor inicial da onda triangular

void setup_wifi() {
  delay(10);
  Serial.begin(115200);
  Serial.println();
  Serial.print("Conectando-se a: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi conectado");
  Serial.println("Endereço de IP: ");
  Serial.println(WiFi.localIP());
}

void reconnect() {
  while (!client.connected()) {
    Serial.print("Tentando conectar ao MQTT...");
    
    if (client.connect("ESP32Client", mqtt_user, mqtt_password)) {
      Serial.println("Conectado");
    } else {
      Serial.print("Falha, rc=");
      Serial.print(client.state());
      Serial.println(" Tentando novamente em 5 segundos");
      delay(5000);
    }
  }
}

void generateSignals() {
  modulanteValue += 0.1; // Incremento para a onda senoidal
  portadoraValue += 0.1; // Incremento para a onda triangular

  if (modulanteValue >= 2 * PI) {
    modulanteValue = 0; // Reinicia a onda senoidal quando atinge 2 * PI (ciclo completo)
  }

  if (portadoraValue >= 2) {
    portadoraValue = 0; // Reinicia a onda triangular quando atinge 2 (ciclo completo)
  }

  float modulante = sin(modulanteValue); // Onda senoidal como modulante
  float portadora = abs(2 * (portadoraValue - round(portadoraValue + 0.5))) * 2; // Onda triangular como portadora

  int pwmValue = (portadora > modulante) ? 0 : 1; // Definindo o valor do PWM

  // Publicar os valores nos tópicos MQTT correspondentes
  if (client.connected()) {
    char pwmMsg[2];
    char modulanteMsg[10];
    char portadoraMsg[10];

    snprintf(pwmMsg, 2, "%d", pwmValue);
    snprintf(modulanteMsg, 10, "%.2f", modulante);
    snprintf(portadoraMsg, 10, "%.2f", portadora);

    client.publish("pwm", pwmMsg);
    client.publish("modulante", modulanteMsg);
    client.publish("portadora", portadoraMsg);

    Serial.println("Valores publicados nos tópicos MQTT.");
  }
}

void setup() {
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  generateSignals();
  delay(5000); // Aguarda 5 segundos antes de publicar os próximos valores
}
